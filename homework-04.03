Задание 1
<?php
    $x =25;
    while($x<10)
    {
        $x--;
    }
    echo($x);
?>
Значение переменной х = 25. Тут присутствует условие что если переменная х меньше 10, то тогда выполняется следующее условие.
Но поскольку 25 больше 10, то цикл выполнятся не будет и выводом будет значение 25.



Задание 2
<?php
    echo (int) ((0.1 + 0.7) * 10);
?>
Функция (int) в примере отбрасывает дробную часть и предоставляет результат в выражении целого числа.
Результатом будет 7.9999999999999991118... Что в примере дает 7.



Задание 3
<?php
      switch(1) {
      case 1: print("Книга");
      case 2: print("Автор");
      default: print("Книга не найдена");
      }
?>
Результатом будет КнигаАвторКнига не найдена. Оператор switch принимает все значения case и значение default
потому что имеет значение 1. Это объясняется тем, что оператор switch/ case использует неточное сравнение.
Если бы значение switch было бы 2 то отобразилось бы АвторКнига не найдена. Если бы ни одно значение не подходило,
то применялась бы только конструкция default.



Задание 4
<?php
    $s = 2;
    switch ($s) {
      case 1:
         print("Валера");
         break;
      case 2:
         print("Павлик");
      case 3:
         print("youtube");
      default: print("По умолчанию");
    }
?>
Здесь похожая ситуация с предыдущим примером. Значение переменной s = 2.
PHP исполнит операторы case 2, case 3 и default. Результат: ПавликyoutubeПо умолчанию




Задание 5
<?php
    $x=10;
    $b=++$x;
    echo($b);
?>
Префиксный инкремент присваивает переменной b увеличенное значение на единицу. Будет 11.




Задание 6
<php
     echo 0x33, ' птиц сидело на ', 022, ' деревьях.';
?>
1.	Ошибка в пропущенном знаке (?) открывающего тега php.
2.	0х33 это шестнадцатеричное число. Оно эквивалентно 51 в десятичной системе исчисления.
3.	022 это восьмеричное число, которе равно 18 в десятичной системе.
4.	Результатом будет «51 птиц сидело на 18 деревьях.»




Задание 7
<?php
for($a=1;$a<=100;$a++)
{
    if($a==50)
    {
        continue;
    }
    echo($a . PHP_EOL);
}
?>
В данном примере цикл for для переменной а будет принимать значение от 1 до 100 включительно
с увеличением значения на одну единицу. Но тут также присутствует условие что переменная а равна 50,
как видно оно принимает значение FALSE, PHP проигнорирует выполнение этой инструкции и число 50 отображаться не будет.




Задание 8
<?php
    $2a = 'Привет';
    echo $2a;
?>
В данном случае присутствует синтаксическая ошибка в переменной ($2a).
Имя для переменной должно начинаться с буквы или символа подчеркивания.




Задание 9
<?php
    echo (int) "1235Валера";
?>
Результатом скрипта будет значение 1235. Это связано с тем, что аргумент типа Integer выводит только значения
чисел и то только целых. Валера в данном случае отображаться не будет.




Задание 10
<?php
    echo (int) "Валера 1235";
?>
В данном случае значение "Валера 1235" трактуется как FALSE. FALSE преобразуется в результат, который будет ноль (0).




Задание 11
<?php
$x=10;
$y=5;
$x+=$y;
var_dump($x, $y);
?>
Переменная х имеет значение 10, переменная у 5. Конструкция $x+=$y дает нам понять,
что значение переменной х увеличивается на значение переменной у. Что будет равно 10+5=15.
Значение переменной у остается без изменений. Вывод: $x будет равна целому числу 15, а $y целому числу 5.




Задание 12
<?php
    10 = $a;
    echo $a;
?>
В данном случае присутствует синтаксическая ошибка. Значение не может быть равно переменной.
Переменной присваивается значение. Должно быть $a = 10. Тогда Echo $a будет равно 10.



Задание 13
<?php

  $a = 1;
  $b = 10;
  $a++;
  $a++;
  $b = &$a;
  $a++;
  $b--;
  echo $b;
?>
Изначально переменная а имела значение 1, b = 10. Следующая строчка с постфиксным инкрементом
придает переменной а значение на одну единицу больше (до 2). Следующая строчка аналогично предыдущей (до 3).
Далее переменная b ссылается на переменную а. Следующая строка еще раз придает переменной а значение
на одну единицу больше (до 4). Далее переменная b понижает значение на единицу (до 3). Результатом скрипта будет 3.



Задание 14
<?php
  $a = 'Апельсин';
  $b = 'Банан';
  echo 'Фрукт: ' . @$d;
?>
Результатом данного скрипта будет Фрукт:. Префикс @ скрывает ошибку переменной d, значение которого не существует.

